generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cinema {
  id                String   @id @default(uuid())
  name              String   @unique
  address           String
  phone             String?
  description       String?
  group_location    String?
  lat               Float?
  lng               Float?
  icon_url          String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  name_en           String?
  description_en    String?
  group_location_en String?
  province          String?
  province_en       String?
  slug              String   @default("")
  halls             hall[]
}

model hall {
  id         String     @id @default(uuid())
  name       String
  seat_count Int?       @default(50)
  cinema_id  String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  cinema     cinema     @relation(fields: [cinema_id], references: [id], onDelete: Cascade)
  seats      seat[]
  showtimes  showtime[]

  @@unique([name, cinema_id])
}

model seat {
  id             String          @id @default(uuid())
  seat_number    String
  row            String
  col            String
  hall_id        String
  booking_seats  booking_seat[]
  hall           hall            @relation(fields: [hall_id], references: [id], onDelete: Cascade)
  showtime_seats showtime_seat[]

  @@unique([seat_number, hall_id])
}

model movie {
  id             String           @id @default(uuid())
  title          String           @unique
  duration_min   Int
  description    String?
  poster_url     String?
  trailer_url    String?
  genre          String?
  rating         String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  release_date   DateTime?
  title_en       String?
  description_en String?
  genre_en       String?
  actors         movie_actor[]
  directors      movie_director[]
  languages      movie_language[]
  showtimes      showtime[]
}

model actor {
  id         String        @id @default(uuid())
  name       String        @unique
  image_url  String?
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  name_en    String?
  movies     movie_actor[]
}

model director {
  id         String           @id @default(uuid())
  name       String           @unique
  image_url  String?
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  name_en    String?
  movies     movie_director[]
}

model language {
  id         String           @id @default(uuid())
  name       String           @unique
  code       String           @unique
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  name_en    String?
  movies     movie_language[]
}

model movie_actor {
  id       String @id @default(uuid())
  movie_id String
  actor_id String
  actor    actor  @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  movie    movie  @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@unique([movie_id, actor_id])
}

model movie_director {
  id          String   @id @default(uuid())
  movie_id    String
  director_id String
  director    director @relation(fields: [director_id], references: [id], onDelete: Cascade)
  movie       movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@unique([movie_id, director_id])
}

model movie_language {
  id          String   @id @default(uuid())
  movie_id    String
  language_id String
  language    language @relation(fields: [language_id], references: [id], onDelete: Cascade)
  movie       movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@unique([movie_id, language_id])
}

model time_slot {
  id         String     @id @default(uuid())
  name       String     @unique
  start_time String
  end_time   String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  showtimes  showtime[]
}

model showtime {
  id           String          @id @default(uuid())
  movie_id     String
  hall_id      String
  time_slot_id String
  date         DateTime
  price        Float           @default(200)
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
  bookings     booking[]
  hall         hall            @relation(fields: [hall_id], references: [id], onDelete: Cascade)
  movie        movie           @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  time_slot    time_slot       @relation(fields: [time_slot_id], references: [id])
  seats        showtime_seat[]

  @@unique([movie_id, hall_id, time_slot_id, date])
}

model showtime_seat {
  id          String    @id @default(uuid())
  showtime_id String
  seat_id     String
  status      String    @default("AVAILABLE")
  price       Float?
  locked_at   DateTime?
  locked_by   String?
  seat        seat      @relation(fields: [seat_id], references: [id], onDelete: Cascade)
  showtime    showtime  @relation(fields: [showtime_id], references: [id], onDelete: Cascade)

  @@unique([showtime_id, seat_id])
}

model user {
  id         String       @id @default(uuid())
  username   String       @unique(map: "user_username_idx")
  email      String       @unique(map: "user_email_idx")
  phone      String       @unique(map: "user_phone_idx")
  password   String
  role       user_role    @default(CUSTOMER)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  avatar_id  String?
  avatar_url String?
  coupons    UserCoupon[]
  bookings   booking[]
}

model booking {
  id          String         @id @default(uuid())
  user_id     String
  showtime_id String
  status      booking_status @default(RESERVED)
  total_price Float
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  showtime    showtime       @relation(fields: [showtime_id], references: [id], onDelete: Cascade)
  user        user           @relation(fields: [user_id], references: [id])
  seats       booking_seat[]
}

model booking_seat {
  id         String  @id @default(uuid())
  booking_id String
  seat_id    String
  price      Float
  booking    booking @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  seat       seat    @relation(fields: [seat_id], references: [id], onDelete: Cascade)

  @@unique([booking_id, seat_id])
}

model coupon {
  id             String       @id @default(uuid())
  code           String       @unique
  title_en       String
  title_th       String
  discription_en String
  discription_th String
  discount_type  String
  discount_value Float
  status         String
  image          String?
  created_at     DateTime     @default(now())
  end_date       DateTime
  max_discount   Float?
  min_amount     Float?
  start_date     DateTime
  updated_at     DateTime     @updatedAt
  usage_limit    Int?
  used_count     Int          @default(0)
  users          UserCoupon[]
}

model UserCoupon {
  id           String    @id @default(uuid())
  user_id      String
  coupon_id    String
  is_collected Boolean   @default(false)
  collected_at DateTime?
  is_used      Boolean   @default(false)
  used_at      DateTime?
  coupon       coupon    @relation(fields: [coupon_id], references: [id])
  user         user      @relation(fields: [user_id], references: [id])

  @@unique([user_id, coupon_id])
  @@unique([user_id, coupon_id], map: "usercoupon_user_id_coupon_id_idx")
}

model outbox {
  sequence_id Int    @id @default(autoincrement())
  mutation_id String
  channel     String
  name        String
  data        Json?
  headers     Json?
}

model seats {
  id          String    @id
  cinema_id   String
  seat_number String
  status      String    @default("available")
  locked_by   String?
  lock_expiry DateTime? @db.Timestamp(6)
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

enum booking_status {
  PAID
  RESERVED
  CANCELLED
}

enum user_role {
  ADMIN
  CUSTOMER
}
