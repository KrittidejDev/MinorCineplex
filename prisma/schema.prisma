generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cinema {
  id             Int      @id @default(autoincrement())
  address        String
  phone          String?
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String   @unique
  group_location String?
  lat            Float
  lng            Float
  halls          Hall[]
}

model Hall {
  id        Int        @id @default(autoincrement())
  name      String
  seatCount Int?
  cinemaId  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cinema    Cinema     @relation(fields: [cinemaId], references: [id])
  seats     Seat[]
  showtimes Showtime[]

  @@unique([name, cinemaId])
}

model Seat {
  id           Int           @id @default(autoincrement())
  seatNumber   String
  row          String
  col          String
  hallId       Int
  bookingSeats BookingSeat[]
  hall         Hall          @relation(fields: [hallId], references: [id])

  @@unique([seatNumber, hallId])
}

model Movie {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  durationMin Int
  description String?
  posterUrl   String?
  trailerUrl  String?
  genre       String?
  rating      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  showtimes   Showtime[]
  trailer     Trailer?
}

model TimeSlot {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  startTime DateTime
  endTime   DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  showtimes Showtime[]
}

model Showtime {
  id         Int       @id @default(autoincrement())
  movieId    Int
  hallId     Int
  timeSlotId Int
  date       DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  bookings   Booking[]
  hall       Hall      @relation(fields: [hallId], references: [id])
  movie      Movie     @relation(fields: [movieId], references: [id])
  timeSlot   TimeSlot  @relation(fields: [timeSlotId], references: [id])

  @@unique([movieId, hallId, timeSlotId, date])
}

model Trailer {
  id      Int    @id @default(autoincrement())
  movieId Int    @unique
  url     String
  movie   Movie  @relation(fields: [movieId], references: [id])
}

model Banner {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  imageUrl  String
  page      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  password  String
  role      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  username  String       @unique
  phone     String       @unique
  bookings  Booking[]
  coupons   UserCoupon[]
}

model Booking {
  id         Int           @id @default(autoincrement())
  userId     Int
  showtimeId Int
  couponId   Int?
  status     String
  totalPrice Float
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  coupon     Coupon?       @relation(fields: [couponId], references: [id])
  showtime   Showtime      @relation(fields: [showtimeId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
  seats      BookingSeat[]
}

model BookingSeat {
  id        Int     @id @default(autoincrement())
  bookingId Int
  seatId    Int
  price     Float
  booking   Booking @relation(fields: [bookingId], references: [id])
  seat      Seat    @relation(fields: [seatId], references: [id])

  @@unique([bookingId, seatId])
}

model CouponCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coupons   Coupon[]
}

model Coupon {
  id            Int             @id @default(autoincrement())
  code          String          @unique
  title         String          // ชื่อคูปอง
  image         String?         // URL หรือ path ของรูป
  discountType  String
  discountValue Float
  minAmount     Float?
  maxDiscount   Float?
  usageLimit    Int?
  usedCount     Int             @default(0)
  startDate     DateTime
  endDate       DateTime
  status        String
  categoryId    Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  bookings      Booking[]
  category      CouponCategory? @relation(fields: [categoryId], references: [id])
  users         UserCoupon[]
}

model UserCoupon {
  id       Int       @id @default(autoincrement())
  userId   Int
  couponId Int
  usedAt   DateTime?
  coupon   Coupon    @relation(fields: [couponId], references: [id])
  user     User      @relation(fields: [userId], references: [id])

  @@unique([userId, couponId])
}
