generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(USER)
  bookings      Booking[]
  coupons       UserCoupon[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Branch {
  id        Int       @id @default(autoincrement())
  name      String    @unique  // เพิ่ม @unique constraint
  address   String
  cinemas   Cinema[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Cinema {
  id         Int       @id @default(autoincrement())
  branch     Branch    @relation(fields: [branchId], references: [id])
  branchId   Int
  name       String
  seats      Seat[]
  showtimes  Showtime[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model Seat {
  id         Int       @id @default(autoincrement())
  row        String
  number     Int
  cinema     Cinema    @relation(fields: [cinemaId], references: [id])
  cinemaId   Int
  bookings   BookingSeat[]
  createdAt  DateTime  @default(now())
}

model Movie {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  durationMin Int
  description String?  
  posterUrl   String?  
  trailerUrl  String?
  genre       String?   // เพิ่ม genre
  rating      String?   // เพิ่ม rating
  showtimes   Showtime[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Showtime {
  id              Int       @id @default(autoincrement())
  movie           Movie     @relation(fields: [movieId], references: [id])
  movieId         Int
  cinema          Cinema    @relation(fields: [cinemaId], references: [id])
  cinemaId        Int
  startTime       DateTime
  price           Float?    @default(200)  // เพิ่ม price
  availableSeats  Int?      @default(100)  // เพิ่ม available seats
  bookings        Booking[]
  createdAt       DateTime  @default(now())
}

model Booking {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  showtime    Showtime  @relation(fields: [showtimeId], references: [id])
  showtimeId  Int
  seats       BookingSeat[]
  status      BookingStatus @default(PENDING)
  totalPrice  Float
  createdAt   DateTime  @default(now())
}

model BookingSeat {
  id         Int       @id @default(autoincrement())
  booking    Booking   @relation(fields: [bookingId], references: [id])
  bookingId  Int
  seat       Seat      @relation(fields: [seatId], references: [id])
  seatId     Int
}

model Coupon {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  discount    Float     // percentage 0-100
  validFrom   DateTime
  validUntil  DateTime
  userCoupons UserCoupon[]
}

model UserCoupon {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  couponId  Int
  used      Boolean  @default(false)
}

enum Role {
  USER
  ADMIN  
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}