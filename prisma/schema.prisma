generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cinema {
  id           String     @id @default(uuid())
  slug         String     @unique
  name         String     @unique
  translations Json?
  address      String
  phone        String?
  city         String?
  city_en      String?
  group        String?
  group_en     String?
  lat          Float?
  lng          Float?
  icon_url     String?
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  coupons      Coupon[]
  halls        Hall[]
  showtimes    Showtime[]

  @@index([slug])
  @@index([city])
}

model Hall {
  id         String     @id @default(uuid())
  slug       String     @unique
  name       String
  seat_count Int        @default(50)
  cinema_id  String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  cinema     Cinema     @relation(fields: [cinema_id], references: [id], onDelete: Cascade)
  showtimes  Showtime[]

  @@unique([name, cinema_id])
  @@index([slug])
  @@index([cinema_id])
}

model SeatTemplate {
  id             String         @id @default(uuid())
  seat_number    String         @unique
  row            String
  col            String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  showtime_seats ShowtimeSeat[]

  @@index([seat_number])
}

model Genre {
  id           String       @id @default(uuid())
  slug         String       @unique
  name         String       @unique
  translations Json?
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  movies       MovieGenre[]

  @@index([slug])
  @@index([name])
}

model Movie {
  id           String          @id @default(uuid())
  slug         String          @unique
  title        String          @unique
  translations Json?
  duration_min Int
  poster_url   String?
  trailer_url  String?
  rating       String?
  release_date DateTime?
  status       MovieStatus     @default(COMING_SOON)
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
  coupons      Coupon[]
  actors       MovieActor[]
  directors    MovieDirector[]
  genres       MovieGenre[]
  languages    MovieLanguage[]
  showtimes    Showtime[]

  @@index([slug])
  @@index([release_date])
  @@index([status])
}

model MovieGenre {
  id         String   @id @default(uuid())
  movie_id   String
  genre_id   String
  created_at DateTime @default(now())
  genre      Genre    @relation(fields: [genre_id], references: [id], onDelete: Cascade)
  movie      Movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@unique([movie_id, genre_id])
  @@index([movie_id])
  @@index([genre_id])
}

model Actor {
  id         String       @id @default(uuid())
  name       String       @unique
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  movies     MovieActor[]

  @@index([name])
}

model Director {
  id         String          @id @default(uuid())
  name       String          @unique
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  movies     MovieDirector[]

  @@index([name])
}

model Language {
  id         String          @id @default(uuid())
  name       String          @unique
  code       String          @unique
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  movies     MovieLanguage[]

  @@index([code])
}

model MovieActor {
  id       String @id @default(uuid())
  movie_id String
  actor_id String
  actor    Actor  @relation(fields: [actor_id], references: [id], onDelete: Cascade)
  movie    Movie  @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@unique([movie_id, actor_id])
  @@index([movie_id])
  @@index([actor_id])
}

model MovieDirector {
  id          String   @id @default(uuid())
  movie_id    String
  director_id String
  director    Director @relation(fields: [director_id], references: [id], onDelete: Cascade)
  movie       Movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@unique([movie_id, director_id])
  @@index([movie_id])
  @@index([director_id])
}

model MovieLanguage {
  id          String   @id @default(uuid())
  movie_id    String
  language_id String
  language    Language @relation(fields: [language_id], references: [id], onDelete: Cascade)
  movie       Movie    @relation(fields: [movie_id], references: [id], onDelete: Cascade)

  @@unique([movie_id, language_id])
  @@index([movie_id])
  @@index([language_id])
}

model TimeSlot {
  id         String     @id @default(uuid())
  name       String     @unique
  start_time String
  end_time   String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  showtimes  Showtime[]

  @@index([name])
}

model Showtime {
  id             String         @id @default(uuid())
  movie_id       String
  hall_id        String
  cinema_id      String
  time_slot_id   String
  date           DateTime
  price          Float          @default(200.0)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  bookings       Booking[]
  cinema         Cinema         @relation(fields: [cinema_id], references: [id], onDelete: Cascade)
  hall           Hall           @relation(fields: [hall_id], references: [id], onDelete: Cascade)
  movie          Movie          @relation(fields: [movie_id], references: [id], onDelete: Cascade)
  time_slot      TimeSlot       @relation(fields: [time_slot_id], references: [id], onDelete: Cascade)
  showtime_seats ShowtimeSeat[]

  @@unique([movie_id, hall_id, time_slot_id, date])
  @@index([movie_id])
  @@index([hall_id])
  @@index([cinema_id])
  @@index([date])
}

model ShowtimeSeat {
  id                String        @id @default(uuid())
  showtime_id       String
  seat_template_id  String
  status            SeatStatus    @default(AVAILABLE)
  price             Float?
  locked_until      DateTime?
  locked_by_user_id String?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  booking_seats     BookingSeat[]
  user              User?         @relation(fields: [locked_by_user_id], references: [id])
  seat_template     SeatTemplate  @relation(fields: [seat_template_id], references: [id], onDelete: Cascade)
  showtime          Showtime      @relation(fields: [showtime_id], references: [id], onDelete: Cascade)

  @@unique([showtime_id, seat_template_id])
  @@index([showtime_id])
  @@index([seat_template_id])
  @@index([locked_by_user_id])
}

model User {
  id           String         @id @default(uuid())
  username     String         @unique
  email        String         @unique
  phone        String?        @unique
  password     String
  role         UserRole       @default(CUSTOMER)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  avatar_url   String?
  avatar_id    String?
  bookings     Booking[]
  payments     Payment[]
  locked_seats ShowtimeSeat[]
  coupons      UserCoupon[]

  @@index([username])
  @@index([email])
  @@index([phone])
}

model Booking {
  id          String        @id @default(uuid())
  public_id   String        @unique
  user_id     String
  showtime_id String
  coupon_id   String?
  status      BookingStatus @default(PENDING)
  total_price Float
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  coupon      Coupon?       @relation(fields: [coupon_id], references: [id])
  showtime    Showtime      @relation(fields: [showtime_id], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  seats       BookingSeat[]
  payment     Payment?

  @@index([public_id])
  @@index([user_id])
  @@index([showtime_id])
  @@index([coupon_id])
}

model BookingSeat {
  id               String       @id @default(uuid())
  booking_id       String
  showtime_seat_id String
  price            Float
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  booking          Booking      @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  showtime_seat    ShowtimeSeat @relation(fields: [showtime_seat_id], references: [id], onDelete: Cascade)

  @@unique([booking_id, showtime_seat_id])
  @@index([booking_id])
  @@index([showtime_seat_id])
}

model Coupon {
  id             String       @id @default(uuid())
  slug           String       @unique
  code           String?      @unique
  translations   Json?
  discount_type  DiscountType
  discount_value Float?
  buy_quantity   Int?
  get_quantity   Int?
  gift_type      GiftType?
  gift_details   Json?
  status         CouponStatus @default(ACTIVE)
  image_url      String?
  start_date     DateTime
  end_date       DateTime
  max_discount   Float?
  min_amount     Float?
  usage_limit    Int?
  used_count     Int          @default(0)
  cinema_id      String?
  movie_id       String?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  bookings       Booking[]
  cinema         Cinema?      @relation(fields: [cinema_id], references: [id])
  movie          Movie?       @relation(fields: [movie_id], references: [id])
  users          UserCoupon[]

  @@index([slug])
  @@index([code])
  @@index([cinema_id])
  @@index([movie_id])
  @@index([start_date, end_date])
}

model UserCoupon {
  id           String    @id @default(uuid())
  user_id      String
  coupon_id    String
  is_collected Boolean   @default(false)
  collected_at DateTime?
  is_used      Boolean   @default(false)
  used_at      DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  coupon       Coupon    @relation(fields: [coupon_id], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, coupon_id])
  @@index([user_id])
  @@index([coupon_id])
}

model Payment {
  id             String        @id @default(uuid())
  booking_id     String        @unique
  user_id        String
  amount         Float
  payment_method PaymentMethod @default(CREDIT_CARD)
  status         PaymentStatus @default(PENDING)
  transaction_id String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  booking        Booking       @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([booking_id])
  @@index([user_id])
  @@index([transaction_id])
}

enum MovieStatus {
  COMING_SOON
  NOW_SHOWING
  ENDED
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  BOOKED
  LOCKED
}

enum BookingStatus {
  PENDING
  RESERVED
  PAID
  CANCELLED
  EXPIRED
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum CouponStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum DiscountType {
  FIXED
  PERCENTAGE
  BUY_X_GET_Y
  GIFT
}

enum GiftType {
  POPCORN
  COUPON_CODE
  OTHER
}

enum PaymentMethod {
  CREDIT_CARD
  QR_CODE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
